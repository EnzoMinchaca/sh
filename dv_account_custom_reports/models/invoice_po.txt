# Generar líneas de nivel 2
        level_2_lines = self._generate_level_2_lines(aml_results, report, line_dict_id, new_line['columns'], options)

        # Ordenar ambas listas de líneas
        # Las líneas de nivel 2 tienen el valor de td_po directamente en 'td_po', mientras que las de nivel 3 están en 'columns'
        combined_lines = sorted(
            level_2_lines + lines, 
            key=lambda l: self._get_td_po_from_columns_or_level_2(l)
        )

        # Identificar los 'td_po' que deben eliminarse
        td_po_to_remove = set()
        
        # Recorre las líneas de nivel 2 para verificar los valores de 'balance' y 'balance_usd'
        for line in level_2_lines:
            if line.get('level') == 2:
                columns = line.get('columns', [])
                balance = next((col.get('no_format', 0) for col in columns if col.get('expression_label') == 'balance'), 0)
                balance_usd = next((col.get('no_format', 0) for col in columns if col.get('expression_label') == 'balance_usd'), 0)
                
                # Si balance o balance_usd es 0, marcar 'td_po' para eliminación
                if balance == 0 and balance_usd == 0:
                    td_po_to_remove.add(self._get_td_po_from_columns_or_level_2(line))
        
        # Filtrar las líneas eliminando las que tengan 'td_po' en la lista de eliminación
        final_lines = []
        last_level_2_id = None
        for line in combined_lines:
            level = line.get('level')

            # Para las líneas de nivel 2
            if level == 2:
                # Guardar el id de la línea de nivel 2
                last_level_2_id = line['id']
                
                # Transferir el parent_id de la primera línea de nivel 3 que sigue
                for next_line in lines:
                    if next_line.get('level') == 3:
                        line['parent_id'] = next_line.get('parent_id', '')
                        line['caret_options'] = 'account.move.line'
                        break
                
                # Filtrar si el 'td_po' está en la lista de eliminación
                td_po = line.get('td_po', '')
                if td_po in td_po_to_remove:
                    continue  # No agregar la línea de nivel 2 si debe ser eliminada

            # Para las líneas de nivel 3
            elif level == 3 and last_level_2_id:
                # Asignar el parent_id de la línea de nivel 2
                line['parent_id'] = last_level_2_id

                # Filtrar si el 'td_po' está en la lista de eliminación
                td_po = self._get_td_po_from_columns(line.get('columns', []))
                if td_po in td_po_to_remove:
                    continue  # No agregar la línea de nivel 3 si su 'td_po' debe ser eliminado

            final_lines.append(line)

        return {
            'lines': final_lines,
            'offset_increment': report.load_more_limit,
            'has_more': has_more,
            'progress': next_progress,
        }